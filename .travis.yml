os: osx
osx_image: xcode10.1
language: objective-c
cache:
  - bundler
  - cocoapods

jobs:
  include:
    - stage: checks
      # This only needs to be run once, so restrict it to an arbitrary combination
      before_install:
        - brew install clang-format
        - brew install swiftformat
      script:
        - ./scripts/check.sh --test-only $TRAVIS_COMMIT_RANGE

    # The order of builds matters (even though they are run in parallel):
    # Travis will schedule them in the same order they are listed here.

    # Primary platforms

    # Run unit tests
    - stage: test
      env:
        - PROJECT=Firebase PLATFORM=iOS METHOD=xcodebuild
      before_install:
        - ./scripts/if_changed.sh ./scripts/install_prereqs.sh
      script:
        - travis_retry ./scripts/if_changed.sh ./scripts/build.sh $PROJECT $PLATFORM

    - stage: test
      env:
        - PROJECT=InAppMessaging PLATFORM=iOS METHOD=xcodebuild
      before_install:
        - ./scripts/if_changed.sh ./scripts/install_prereqs.sh
      script:
        - travis_retry ./scripts/if_changed.sh ./scripts/build.sh $PROJECT $PLATFORM

    # pod lib lint to check build and warnings for dynamic framework build (use_frameworks!)
    - stage: test
      env:
        - PROJECT=Firebase PLATFORM=iOS METHOD=pod-lib-lint
      before_install:
        - ./scripts/if_changed.sh ./scripts/install_prereqs.sh
      script:
        - travis_retry ./scripts/if_changed.sh ./scripts/pod_lib_lint.sh FirebaseInAppMessaging.podspec

    - stage: test
      env:
        - PROJECT=Firestore PLATFORM=iOS METHOD=pod-lib-lint
      before_install:
        - ./scripts/if_changed.sh ./scripts/install_prereqs.sh
      script:
        # Eliminate the one warning from BoringSSL when CocoaPods 1.6.0 is available.
        # The travis_wait is necessary because the command takes more than 10 minutes.
        - travis_wait 45 ./scripts/if_changed.sh ./scripts/pod_lib_lint.sh FirebaseFirestore.podspec --allow-warnings --no-subspecs

    # pod lib lint to check build and warnings for static library build - only on cron jobs
    - stage: test
      env:
        - PROJECT=Firebase PLATFORM=iOS METHOD=pod-lib-lint
      before_install:
        - ./scripts/if_cron.sh ./scripts/install_prereqs.sh
      script:
        - travis_retry ./scripts/if_cron.sh ./scripts/pod_lib_lint.sh FirebaseInAppMessaging.podspec --use-libraries
        - travis_retry ./scripts/if_cron.sh ./scripts/pod_lib_lint.sh FirebaseInAppMessagingDisplay.podspec --use-libraries

    # Daily test for symbol collisions between Firebase and CocoaPods.
    - stage: test
      env:
        - PROJECT=SymbolCollision PLATFORM=iOS METHOD=xcodebuild
      before_install:
        - ./scripts/if_cron.sh ./scripts/install_prereqs.sh
      script:
        - travis_retry ./scripts/if_cron.sh ./scripts/build.sh $PROJECT $PLATFORM $METHOD

    # Alternative platforms

    # Community-supported platforms

    - stage: test
      env:
        - PROJECT=Firebase PLATFORM=macOS METHOD=xcodebuild
      before_install:
        - ./scripts/if_changed.sh ./scripts/install_prereqs.sh
      script:
        - travis_retry ./scripts/if_changed.sh ./scripts/build.sh $PROJECT $PLATFORM

    - stage: test
      env:
        - PROJECT=Firebase PLATFORM=tvOS METHOD=xcodebuild
      before_install:
        - ./scripts/if_changed.sh ./scripts/install_prereqs.sh
      script:
        - travis_retry ./scripts/if_changed.sh ./scripts/build.sh $PROJECT $PLATFORM

    # Firestore sanitizers

    # TODO(varconst): enable UBSan in xcodebuild. Right now if fails during
    # linkage (it works if enabled together with ASan, but it's supposed to be
    # usable on its own, too).

  allow_failures:
    # Run fuzz tests only on cron jobs.
    - stage: test
      env:
        - PROJECT=Firestore PLATFORM=iOS METHOD=fuzz
      before_install:
        - ./scripts/if_cron.sh ./scripts/install_prereqs.sh
      script:
        # The travis_wait is necessary because fuzzing runs for 40 minutes.
        - travis_wait 45 ./scripts/if_cron.sh ./scripts/fuzzing_ci.sh

    # TODO(varconst): UBSan for CMake. UBSan failures are non-fatal by default,
    # need to make them fatal for the purposes of the test run.

  # TODO(varconst): disallow sanitizers to fail once we fix all existing issues.
    - env:
      - PROJECT=Firestore PLATFORM=macOS METHOD=cmake SANITIZERS=asan
    - env:
      - PROJECT=Firestore PLATFORM=macOS METHOD=cmake SANITIZERS=tsan
    - env:
      - PROJECT=Firestore PLATFORM=iOS METHOD=xcodebuild SANITIZERS=asan
    - env:
      - PROJECT=Firestore PLATFORM=iOS METHOD=xcodebuild SANITIZERS=tsan

  # TODO(varconst): enable if it's possible to make this flag work on build
  # stages. It's supposed to avoid waiting for jobs that are allowed to fail
  # before reporting the results.
  # fast_finish: true

branches:
  only:
    - master
